#include <iostream>

using namespace std;		/// 헤더 파일 안에서는 절대로 using 문을 작성하면 안된다.
							// 그러면 그 헤더 파일을 인클루드하는 모든 파일에서 using 문으로 지정한 방식으로 호출해야 한다.

int main()
{
	/// \r : 캐리지 리턴 (출력 커서를 처음으로 옮김)
	/// printf()나 scanf()는 타입 안정성(타입 세이프)을 보장하지 않기 때문에 C++ 스트림 라이브러리 사용을 권장
	
	/// 리터럴 : 코드에 표시한 숫자나 스트링과 같은 값
	// C++은 다양한 표준 리터럴을 제공
	// 숫자는 다음과 같은 리터럴로 표현할 수 있음

	cout << 123 << '\n';		// 10진수 리터럴 (123)
	cout << 0173 << '\n';		// 8진수 리터럴 (123)
	cout << 0x7B << '\n';		// 16진수 리터럴 (123)
	cout << 0b1111011 << '\n';	// 2진수 리터럴 (123)
	
	cout << 3.14f << '\n';
	cout << 3.14 << '\n';
	cout << 'a' << '\n';
	cout << "character array" << '\n';

	// 숫자 리터럴에서는 자릿수 구분자를 사용할 수 있다.
	// 자릿수 구분자는 작은따옴표로 표현한다.
	cout << 23'456'789 << '\n';
	cout << 0.123'456f << '\n';

	/// 변수
	// c++에서 변수는 코드 안 어디에서나 선언 가능

	/// c++17 std::byte
	// 한 바이트를 표현한다. C++17 이전에는 한 바이트를 char나 unsigned char로 표현했다.
	// 이러한 표현은 문자를 다루는 듯한 느낌을 준다. 반면 std::byte로 표현하면 메모리의 한 바이트라는 의미를 명확히 드러낼 수 있다.
	
	/// 연산 실행 순서
	// c++에서는 /, *, % 연산을 가장 먼저 수행하고,
	// 그다음으로 덧셈과 뺄셈을 계산하고,
	// 마지막으로 비트 연산을 수행한다(우선순위가 같을 때는 왼쪽에서 오른쪽 순서로 계산한다)
	int i = 34 + 8 * 2 + 21 / 7 % 2;		// 결과는 1
	int j = 34 + (8 * 2) + ((21 / 7) % 2);	// 마찬가지로 결과는 1. 소괄호를 이용하여 가독성을 좋게 하자
}

/// C++17 중첩된 네임스페이스
namespace MyLibraries
{
	namespace Networking
	{
		namespace FTP
		{
			// ...
		}
	}
}

// C++17에서는
namespace MyLibraries::Networking::FTP
{
	//...
}
// 또는 네임스페이스 앨리어스를 사용하여 다르게 표현하거나 더 짧게 만들 수 있음
namespace MyFTP = MyLibraries::Networking::FTP;

