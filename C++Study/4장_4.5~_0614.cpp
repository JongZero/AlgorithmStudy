/// 4.5 코드 재사용
// 경험이 풍부한 C++ 프로그래머라면 프로젝트를 구성하는 코드를 무작정 처음부터 작성하지 않는다.
// 표준 라이브러리, 오픈소스 라이브러리, 회사에서 구매한 상용 코드, 예전 프로젝트에서 작성했던 코드를
// 비롯하여 다양한 소스를 최대한 활용한다.
// 그러기 위해선 주어진 디자인에서 코드를 자유자재로 활용할 수 있어야 한다.

// NOTE : 코드 재사용이란 단순히 기존 코드를 복사해서 붙이는 것이 아니다. 이와 정반대로 일일이 복제하지 않고도
// 코드를 재사용할 수 있어야 한다.

/// 용어 정리
// 재사용 가능한 코드는 다음 세 가지로 구분할 수 있다.
// 예전에 자신이 작성했던 코드
// 동료가 작성한 코드
// 현재 소속 회사나 조직 외의 서드파티에서 작성한 코드

// 재사용할 코드를 만드는 형식도 다음과 같이 다양하다.
// 독립 함수 또는 클래스 : 자신 또는 동료가 작성한 코드 대부분 이런 형태로 재사용한다.
// 라이브러리 : XML을 파싱하거나 암호화와 같은 특정한 작업을 처리하는 데 필요한 코드를 한데 묶은 것이다.
// 스레드와 동기화를 지원하거나 네트워킹이나 그래픽 작업에 특화된 기능도 라이브러리로 구성하는 경우가 많다.
// 프레임워크 : 디자인할 프로그램의 기반이 되는 코드를 모아둔 것이다. 예를 들어 MFC(Microsoft Foundation Class) 라이브러리는
// 마이크로소프트 윈도우용 GUI(Graphical User Interface) 애플리케이션을 개발하기 위한 프레임워크다. 프레임워크에 따라 프로그램의
// 구성 방법까지 제시하기도 한다.

// 결론 : 프로그램은 라이브러리를 활용하고, 프레임워크에 맞게 작성한다. 다시 말해 라이브러리는 특정한 기능을 제공하는 반면
// 프레임워크는 프로그램의 디자인과 구조에 대한 토대를 제공한다.

// API(Application Programming Interface)는 특정한 기능을 수행하는 코드나 라이브러리에 대한 인터페이스다.
// 네트워크 프로그래밍에서 많이 사용하는 소켓 API를 예로 들 수 있는데, 이 API는 소켓 라이브러리를 직접 제공하지 않고
// 이를 사용하기 위한 인터페이스만 제공한다.

// 주의 : API와 라이브러리를 혼용하는 경우가 많은데, 둘은 서로 다른 개념이다. 라이브러리는 구현을 의미하는 반면
// API는 이러한 라이브러리를 외부에 제공하기 위한 인터페이스를 가리킨다.

// 이 장에서는 간결한 표현을 위해 라이브러리, 프레임워크, 동료가 만든 함수의 묶음 등을 비롯한 재사용 가능한
// 코드를 모두 라이브러리라고 표현한다.

/// *****************************************************
/// *****************************************************
/// 이 뒤에 나오는 체스 프로그램 예제는 정말 참고할만 하다.
/// 다음에 다시 한 번 보자.
/// 실제로 예제에서 나온 프로그램 디자인을 보고 이것을 직접 구현해봐도 좋을 것 같다.
/// 직접 구현하는 방식은 콘솔 <-> 2D <-> 3D가 서로 스위칭 되게끔 해보면 좋을듯